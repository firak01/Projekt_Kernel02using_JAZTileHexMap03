<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>tilehexmap03zzz</groupId>
	<artifactId>TileHexMap03ZZZ</artifactId>
	<version>0.0.1-SNAPSHOT</version>

	<name>TileHexMap03ZZZ</name>
	<url>http://maven.apache.org</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.1</version>
			<scope>test</scope>
		</dependency>

<!-- 		 <dependency> -->
<!--       <groupId>org.hibernate</groupId> -->
<!-- 		      <artifactId>hibernate-core</artifactId> -->
<!-- 		      <version>5.1.0.Final</version> -->
<!-- 		</dependency> -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>4.2.4.Final</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>4.2.4.Final</version>
		</dependency>
<!-- 		<dependency> -->
<!-- 			<groupId>org.xerial</groupId> -->
<!-- 			<artifactId>sqlite-jdbc</artifactId> -->
<!-- 			<version>3.7.2</version> -->
<!-- 			<scope>provided</scope>FGL 20171115. Merke: Laut Doku muss für eine Web Applikation das sqlite-jdbc-(version).jar in das Verzeichnis (TOMCAT_HOME)/lib gelegt werden (, um JNDI -also 'java naming und directory" - nutzen zu können). Da bei 'JNI' -also 'java native ...'- keine Applikation mehr als 1x vorhanden sein darf bekommt man ohne die "provided" Angabe die Fehlermeldung 'no SQLite library found'. -->
<!-- 		</dependency> -->
		<!-- Einbinden einer aktulleren Version -->
		<dependency>
			<groupId>org.xerial</groupId>
			<artifactId>sqlite-jdbc</artifactId>
			<version>3.23.1</version>
		</dependency>
		
		<!-- Spezielles Connection - Pooling einbinden. Damit diese auf 1 gesetzt werden kann. -->
		<!-- Ziel: Man soll die Datenbank per Betriebsystem löschen können. Im Beispiel für 4.3.7. -->
		<!-- https://stackoverflow.com/questions/29364837/hibernate-sqlite-sqlite-busy -->
		<dependency>
		      <groupId>org.hibernate</groupId>
		      <artifactId>hibernate-c3p0</artifactId>
				<version>4.2.4.Final</version>
		</dependency>
		
		<!-- Einen anderen Hibernate Dialekt einbinden für Hibernate 4... -->
		<!-- Diesen dann bekanntmachen unter dem Namen:  
		a) Set the dialect property hibernate.dialect to the class name com.enigmabridge.hibernate.dialect.SQLiteDialect
		b) hibernate.properties
		   hibernate.dialect = com.enigmabridge.hibernate.dialect.SQLiteDialect	 	   
		-->
		<dependency>
		  <groupId>com.enigmabridge</groupId>
		  <artifactId>hibernate4-sqlite-dialect</artifactId>
		  <version>0.1.2</version>
		</dependency>
		
		
		<!-- https://mvnrepository.com/artifact/commons-logging/commons-logging -->
		<dependency>
		    <groupId>commons-logging</groupId>
		    <artifactId>commons-logging</artifactId>
		    <version>1.2</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/com.google.guava/guava -->
		<dependency>
		    <groupId>com.google.guava</groupId>
		    <artifactId>guava</artifactId>
		    <version>16.0.1</version>
		</dependency>
		
		<!-- slf4j-log4j, verwendet von Hibernate. braucht eine log4j.properties Datei im classpath -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>1.6.1</version>
		</dependency>
	</dependencies>
</project>
