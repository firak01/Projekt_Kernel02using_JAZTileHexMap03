##########################################################################################################################
### Diese Ini-Datei ist die Konfiguration des Kernels.                                                                        
### Der Name/Pfad  und der Applikationsalias plus Systemnummer (verwendet in [ ] ) muß bei Erstellung des KernelObjekts übergeben werden.
### In KernelConfigZZZ werden folgende, optionale Übergabeparameter definiert 
	-k = ApplicationKeyDefault 
	-s = SystemNumberDefault
	-f = ConfigFileNameDefault
	-d = ConfigDirectoryNameDefault		
##########################################################################################################################
;Merke 1: Damit diese Datei auf einem WebServer auch gefunden wird, muss Sie im Classpath liegen. 
;         Das ist nur unterhalb des Source-Ordners (src) gesichert.
;Merke 2: Nach Änderungen an der Datei, muss der Server neu gestartet werden (das .war file) neu deployed werden.
;Merke 3: An die Zeilen angehängte Semikoli werden nicht als Kommentare erkannt. Am Zeilenanfang schon.
;         Parameter ausserhalb von Sections werden nicht erkannt.
;

### Application THM konfigurieren, Systemübergreifend
[THM]
KernelConfigPath=<z:Empty/>
KernelConfigFile=ZKernelConfigTileHexMap02Client.ini

### Modulkonfiguration(en) auf Applikationsebene
# Merke: Mit dem Applikationskey endend, ist ganz unspezifisch. Es kann auch eine Modulkonfiguration speziell für eine Klasse geben.
# Jede Klasse, die ein main() enthält 'kann' hier als Modul konfiguriert werden
# Dazu den Klassennamen hier angeben. Um eine extra Datei zu sparen, kann hier auch der gleiche Dateiname wie für den Kernel angegeben werden.
# Schema: KernelConfig + [Path/File] + Klassenname

KernelConfigPathuse.thm.client.FrmMapSingletonTHM=<z:Empty/>
KernelConfigFileuse.thm.client.FrmMapSingletonTHM=ZKernelConfigTileHexMap02Client.ini

#Hierin kann LogZZZ, das ja beim Initialisieren des Kernels auch zur Verfügung gestellt wird, die Protokollierung durchführen. Default: c:\fglKernel\KernelLog
KernelLogPath=c:\temp
KernelLogFile=ZKernelLog_TileHexMap02Client.txt

### Programmkonfiguration(en) (per Aliasnamen)
# Wenn in diesem File die Module definiert sind, dann können hier auch die einzelnen Programme der Module definiert werden.
# Der hier definierte Aliasname ist ein feststehender Name, der verwendet werden muss, wenn über ihn Parameter aus dem Abschnitt gelesen werden sollen.
# Der Vorteil von Aliasnamen ist, das sie für mehrere 'Programme' verwendet werden können.
# BEISPIEL: Finden der Notes-Context Objekte. z.B. Configurationsdb
# ;das ist nicht der eigentliche Programname .....
# ;use.via.client.DlgIPExternalVIA=IP_Context
# ;use.via.client.module.ip.ProgramIPContentVIA=IP_Context
#
# Merke:
# Jeder Test ist als eigenes Programm definiert. D.h. Er hat in dieser Datei eine eigene Section.
# Es ist möglich Aliaswerte zu definieren (die dann in die Section kokmmen).
# Aber es reicht auch aus den Programnamen als Section zu verwenden.
# Schema: Klassenname oder Aliasname = Aliaswert

# Die Log4j Konfiguration
basic.zBasic.util.log.ReportLogZZZ=Log4j

# Die Hexfeld-Karte
use.thm.client.PanelMain_CENTERTHM=HexMapCentral

# Das Katalog-Panel
# a) Von einem Nachbarpanel aus gesucht, ist hierüber zu finden
use.thm.client.PanelMain_WESTTHM=CatalogPanel
# b) Von der Variantenklasse aus definiert, hierüber....
use.thm.client.component.VariantCatalogTHM=CatalogPanel

# Die JOption Pane für die Detailangaben des Spielsteins
use.thm.client.handler.TileMouseMotionHandlerTHM=TileDetailDialog

#################################################################
### Applikationsparameter, die auf Applikationsebene definiert wurden.
# Merke: Wenn für die Modulkonfiguration dieselbe ini-Datei wie für die Applikationskonfiguration verwendet wird, dann entspricht das auch einem Parameter, der auf Applikationsebenen konfiguriert wurde.
#            Beispiel: Wenn also einParameter in der Section [VIA#01] liegt, dann ist das ein "Applikationsparameter" und ein "Modulparameter", wenn das ini-File für die Applikationskonfiguration auch als ini-File für die Modulkonfiguration verwendet wird.

### Maskenübergreifende Parameter
#Pfad zur Datenbank, Swing Standalone Applikation
DatabaseLocalPath=c:\server\SQLite\TileHexMap03.sqlite

#Diese JNDI Ressource muss als Name in context.xml des Tomcat Servers definiert sein. Beispiel:
#<ResourceLink name="jdbc/ServicePortal" 
#              global="jdbc/ServicePortal"
#              auth="Container"
#              type="javax.sql.DataSource"
#              driverClassName="org.sqlite.JDBC"          
#              url="jdbc:sqlite:c:\\server\\SQLite\\TileHexMap03JndiTest.sqlite"
#              factory="use.thm.persistence.hibernate.HibernateSessionFactoryTomcatFactoryJndiTHM" />
DatabaseRemoteNameJNDI=jdbc/ServicePortal

# Der Pfad für diverse Downloads, z.B. zum Export der generierten und gespeicherten Bilder einer TROOPARMY/TROOPFLEET VARIANTE...
# Diesen Pfad nicht im Projekt selbst unterbringen, da die Dateien sonst ins Repository eingecheckt würden.
ApplicationDownloadPath=c:\temp


#Gültiger Wert 6, ist als maximal getestet; 2 ist schon sehr klein; 1 ist auch getestet aber winzig.
GuiZoomFactorListInitial=2.0;3.5;6.0;
#TODO Das zuest mal mit einem FloatWert-testen. Danach soll das ein Alias sein, der die Postion in der HexZoomFactorListIniatial angibt
#          UND innerhalb des Spaltennamens für das Bild die jeweilige Größe angibt. 
#Merke: 01 02 03 sind im Model der TroopVariant - Klasse fest als Spaltennamensbestandteil definiert für CATALOG und DIALOG 
GuiZoomFactorAliasStart=02

# Die Schriftgröße für die Texte des GUI
GuiLabelFontSizeBase_float=4.0
GuiLabelFontSize_float=<Z><Z:math><Z:val>[THM]GuiLabelFontSizeBase_float</Z:val><Z:op>*</Z:op><Z:val><z:var>GuiZoomFactorUsed</z:var></Z:val></Z:math></Z>


###
# Merke: Parameter der Hauptmaske sollten auf Modulebenen definiert werden, weil man an den Namen des Moduls durch frameParent.getClass().getName() rankommt.
###
;Dieser Parameter gibt an, wie gross der Frame sein soll, verglichen mit dem Bildschirm. Wenn er gesetzt ist, wird der Frame auch nicht "gepackt".
FrameSizeInScreenPercent = 70

### Merke: Damit für verschiedene Systeme unterschiedlichen log4j Konfigurationen erreicht werden können, dies in eine Section auslagerbar.
###        Kann aber auch hier zentral definiert werden
#;++++Diese Parameter werden speziell für log4j benötigt++++
Log4jName=LogTHM
Log4jLevel=INFO

#;TODO: DIESER EINTRAG  (Log4jPatternPath) SOLLTE AUCH WEGGELASSEN WERDEN KÖNNEN !!!
#;Aus dem FilePattern wird eine Log4J Configurationsdatei erzeugt
Log4jPathPattern=src
Log4jFilePattern=log4jpattern_prod.conf

Log4jPathConfig=<z:Empty/>
Log4jFileConfig=log4j.conf


#########################################################################################################
#### Application THM konfigurieren, als System 01 (normalerweise das Produktivsystem)
[THM!01]
## Merke: Mit dem Applikationskey endend, ist ganz unspezifisch. Es kann auch eine Modulkonfiguration speziell für eine Klasse geben.
#KernelConfigPath=<z:Empty/>
#KernelConfigFile=ZKernelConfigTileHexMap02Client.ini

#### Modulkonfiguration(en) auf Systemebene, jeder Test als eigenes Modul, in DIESER ini-Datei ##################
## Jede Klasse, die ein main() enthält 'kann' hier als Modul konfiguriert werden
## Dazu den Klassennamen hier angeben. Um eine extra Datei zu sparen, kann hier auch der gleiche Dateiname wie für den Kernel angegeben werden.
## Schema: KernelConfig + [Path/File] + Klassenname
#KernelConfigPathuse.thm.client.FrmMapSingletonTHM=<z:Empty/>
#KernelConfigFileuse.thm.client.FrmMapSingletonTHM=ZKernelConfigTileHexMap02Client.ini

#################################################################
### Applikationsparameter, die auf Systemebenebene definiert wurden.
# Merke: Wenn für die Modulkonfiguration dieselbe ini-Datei wie für die Applikationskonfiguration verwendet wird, dann entspricht das auch einem Parameter, der auf Applikationsebenen konfiguriert wurde.
#            Beispiel: Wenn also einParameter in der Section [VIA#01] liegt, dann ist das ein "Applikationsparameter" und ein "Modulparameter", wenn das ini-File für die Applikationskonfiguration auch als ini-File für die Modulkonfiguration verwendet wird.
# .....


#################################################################
### Konkrete(s) Programm(e)
# Entweder über den Aliasnamen definiert, oder über den Klassennamen direkt
# Für eine spezielle Umgebung kann der Programmname auch definiert werden nach dem Schema:
#         ApplicationKey + "#" + Systemnumber + "!" + Programmname
# Merke: Einträge, die für die spezielle Umgebung gemacht wurden, ersetzen die für den allgemeinen Programmnamen gemachte Einträge.
############################################
# Fortsetzung des BEISPIELS für definiertes Programm über einen Aliasnamen.
# [IP_Context]
# ;Das ist die URL, in welcher die externe IP-Adresse des Servers gefunden werden kann.
# URL2Read=http://fgl.homepage.t-online.de/pagIPLinkFGL.html
#
# ;Zu Testzwecken kann auch eine Datei als Quelle der IP-Adresse angegeben werden
# ;URL2Read=file:///C:\1fgl\Workspace\Eclipse3FGL\JAZVideoInternetArchive\pagIPLinkFGL4Debug.html
#
# ;Ggf. zu verwendender Proxy
# ;ProxyHost=145.254.22.10
# ProxyHost=
# ProxyPort=8000
#
# ;Die IP, welche in der URL2Read gefunden und dann hier abgespeichert wurde. Merke: In der Entwicklungsumgebung ist 192.168.3.101 zu verwenden
# IPExternal=84.135.227.75

[Log4j!02]
;++++Diese Parameter werden speziell für log4j benötigt++++
Log4jName=LogTHM
Log4jLevel=DEBUG

;TODO: DIESER EINTRAG  (Log4jPatternPath) SOLLTE AUCH WEGGELASSEN WERDEN KÖNNEN !!!
;Aus dem FilePattern wird eine Log4J Configurationsdatei erzeugt
Log4jPathPattern=src
Log4jFilePattern=log4jpattern_test.conf

Log4jPathConfig=<z:Empty/>
Log4jFileConfig=log4j.conf


################################################
# Die Speicherung in der Datenbank
[EntityTroopVariant]
IconWidth=100
IconHeight=40

# Die zentrale Karte
[HexMapCentral]
NumberOfColumn=20
NumberOfRow=16
#HexSideLengthUsed= 20 oder 40 oder gross 60 sind gute Werte (also HexSideLengthBase * Zoomfaktor von 2 oder 3)
HexSideLengthBase=20
HexSideLength=<Z><Z:math><Z:val>[HexMapCentral]HexSideLengthBase</Z:val><Z:op>*</Z:op><Z:val><z:var>HexZoomFactorUsed</z:var></Z:val></Z:math></Z>

#Gültiger Wert 6, ist als maximal getestet; 2 ist schon sehr klein; 1 ist auch getestet aber winzig.
HexZoomFactorListInitial=2.0;2.5;3.0;3.5;4.0;6.0
#TODO Das zuest mal mit einem FloatWert-testen. Danach soll das ein Alias sein, der die Postion in der HexZoomFactorListIniatial angibt
#          UND innerhalb des Spaltennamens für das Bild die jeweilige Größe angibt. 
#Merke: 01 02 03 04 05 06 sind im Model der TroopVariant - Klasse fest als Spaltennamensbestandteil definiert.
HexZoomFactorAliasStart=03

# Für Spielsteine, die auf dieser Karte (damit ist es das PanelParent) platziert werden
IconWidthBase=25
IconHeightBase=10
IconWidth=<Z><Z:math><Z:val>[HexMapCentral]IconWidthBase</Z:val><Z:op>*</Z:op><Z:val><z:var>HexZoomFactorUsed</z:var></Z:val></Z:math></Z>
IconHeight=<Z><Z:math><Z:val>[HexMapCentral]IconHeightBase</Z:val><Z:op>*</Z:op><Z:val><z:var>HexZoomFactorUsed</z:var></Z:val></Z:math></Z>

#Die Schriftgröße für das Spielsteinlabel und die Postion zum Zentrierern in der Höhe werden auch vom HexZoomFactorAliasStart beeinflusst.
IconLabelFontSizeBase_float=4.0
IconLabelFontOffsetHeightBase_float=1.5
IconLabelFontSize_float=<Z><Z:math><Z:val>[HexMapCentral]IconLabelFontSizeBase_float</Z:val><Z:op>*</Z:op><Z:val><z:var>HexZoomFactorUsed</z:var></Z:val></Z:math></Z>
IconLabelFontOffsetHeight_float=<Z><Z:math><Z:val>[HexMapCentral]IconLabelFontOffsetHeightBase_float</Z:val><Z:op>*</Z:op><Z:val><z:var>HexZoomFactorUsed</z:var></Z:val></Z:math></Z>

# Das Katalog Panel
[CatalogPanel]
#IconWidth=100, beim HexZoomFactorAliasStart 3
#IconHeight=40, beim HexZoomFactorAliasStart 3
#Eigentlich wären die Werte 33,33 und 13,33. Dazu muss aber mit float gerechnet werden.
#TODO GOON 20180721: Statt [HexMapCentral]HexZoomFactorAliasStart sollte hier eine "von aussen" übergebene Variable
#           verwendet werden. Dann kann die Größe des Icons dynamisch an dem aktuellen Zoom der Anwendung angepasst werden.
#           Also ziel: IconWidth=<Z><Z:math><Z:val>33</Z:val><Z:op>*</Z:op><Z:val><Z:var>ZoomLevelCurrent</Z:var></Z:val></Z:math></Z>
#           ZoomLevelCurrent wäre damit der Key einer HashMap, dessen Wert hier eingesetzt werden müsste.
#           Diese Variablenersetzung muss noch VOR der IniPath-Variablen Ersetzung erfolgen.
IconWidth=<Z><Z:math><Z:val>33</Z:val><Z:op>*</Z:op><Z:val><z:var>GuiZoomFactorUsed</z:var></Z:val></Z:math></Z>
IconHeight=<Z><Z:math><Z:val>13</Z:val><Z:op>*</Z:op><Z:val><z:var>GuiZoomFactorUsed</z:var></Z:val></Z:math></Z>

#ACHTUNG: Übernimm die Lösung, dass etwas an einer anderen Stelle Konfiguriert wurde und hier wiederverwendet wird. Somit kann man wie im Beispiel unten auch Strings zusammensetzen.
#Das ist die URL, welche für das login verwendet wird. Durch KernelExpressionIniSolverZZZ.compute() wird der Ausdruck: <Z>[IP_CONTEXT]IPExternal</Z> aufgelöst
#URLLogin = "http://<Z>[IP_CONTEXT!03]IPExternal</Z>/names.nsf?login"
#Die Groesse der Icons beim Ziehen soll dem der Icons auf der Karte entsprechen.
#Technisch das Problem, dass der ermittelte Wert seinerseits eine Formel ist, also ein gewisser Grad der Veschachtelung
IconWidthOnDrag=<Z>[HexMapCentral]IconWidth</Z>
IconHeightOnDrag=<Z>[HexMapCentral]IconHeight</Z>

# Die Schriftgröße für die Texte der "Boxen" im Katalog.
# Merke: Kann erst genutzt werden, wenn die Boxen eine eigene paint-Methode haben....
#IconLabelFontSizeBase_float=4.0
#IconLabelFontSize_float=<Z><Z:math><Z:val>[CatalogPanel]IconLabelFontSizeBase_float</Z:val><Z:op>*</Z:op><Z:val><z:var>GuiZoomFactorUsed</z:var></Z:val></Z:math></Z>

[TileDetailDialog]
# Für Spielsteine, die auf dieser Karte (damit ist es das PanelParent) platziert wurden über Doppelclick einen Dialog aufrufen.
# Ziel ist es, dass das Bild größer sein kann als im Catalog oder als das Icon auf der Karte
#IconWidth=150, beim HexZoomFactorAliasStart 3
#IconHeight=60, beim HexZoomFactorAliasStart 3
IconWidth=<Z><Z:math><Z:val>50</Z:val><Z:op>*</Z:op><Z:val><z:var>GuiZoomFactorUsed</z:var></Z:val></Z:math></Z>
IconHeight=<Z><Z:math><Z:val>20</Z:val><Z:op>*</Z:op><Z:val><z:var>GuiZoomFactorUsed</z:var></Z:val></Z:math></Z>
