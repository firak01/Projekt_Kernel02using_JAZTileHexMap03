<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN" "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">

<hibernate-configuration>

	<session-factory>
		<!-- Im Code wird die Konfiguration aber durch Java-Befehle programmatisch erstellt und diese hier uebersteuert --> 
		<!-- 20171212: Diese Properties werden an die EntityManagerFactory (in HibernateContextProviderZZZ) übergeben. 
		               Nur das Klassenmapping kann nicht übergeben werden -->
		    
		<!--  Exkurs 20171103: Versuche über den nachfolgenden Namen eine SessionFactory zu erzeugen -->  
<!--        <property name="hibernate.session_factory_name">hibernate.session-factory.ServicePortal</property> -->
<!-- 		damit funktioniert es, aber auch ohne das Fragezeichen, ja funktioniert auch ohne diese Angabe<property name="hibernate.session_factory_name">tryout.zBasic.persistence.hibernate.HibernateSessionFactoryTomcatFactory</property> -->
       
		<!-- Echo all SQL to stdout -->
		<property name="show_sql">true</property>
		<property name="format_sql">true</property>

		<!-- <property name="dialect">org.hibernate.dialect.SQLiteDialect</property> -->
		<!-- <property name="dialect">basic.persistence.hibernate.SQLiteDialect</property> --><!-- Eine einfache Version aus dem Netz -->
		<property name="dialect">com.enigmabridge.hibernate.dialect.SQLiteDialect</property><!-- Per Maven einbundene 'neuerer' Dialekt: https://github.com/EnigmaBridge/hibernate4-sqlite-dialect -->
		
		<!-- Database Connection settings -->
		<property name="connection.driver_class">org.sqlite.JDBC</property>
<!-- 		20171207: Es soll auf die reine Konfiguration verlassen werden, auch auf context.xml für JNDI ZUgriff -->        
<!--    <property name="connection.url">jdbc:sqlite:c:\\server\\SQLite\\TileHexMap03.sqlite</property> --><!-- wird in der Konfiguration programatisch gesetzt, je nachdem, ob Datenbank vorhanden oder nicht. -->
		

		<property name="connection.username"></property>
		<property name="connection.password"></property>		
		<property name="current_session_context_class">thread</property><!-- Enable Hibernates automatic session context management -->
		<property name="cache.provider_class">org.hibernate.cache.NoCacheProvider</property><!-- disable the second-level cache -->

		<!-- ############# CONNECTION POOLING ############### -->
		<!-- Beim Löschen der Datenbank-Datei per Betriebssystem git es die Fehlermeldung:  Aktion kann nicht abgeschlossen werden da die Datei n Java ..... geöffnet ist.-->
		<!-- Idee aus: https://stackoverflow.com/questions/29364837/hibernate-sqlite-sqlite-busy -->
		<!-- Auch wenn das nicht hinsichtlich der in Java geöffneten Datei hilft, ist das cool. Aber: da oben die connection.url auskommentiert wird
		        und diese programmatisch gesetzt wird, muss der Pool auch prrogrammatisch gesetzt werden.
		        Ansonsten findet der Pool die URL nicht und es gibt eine NullPointer Exception beim Protocol:
		        
		        DEBUG com.mchange.v2.resourcepool.BasicResourcePool - An exception occurred while acquiring a poolable resource. Will retry.
java.lang.NullPointerException
	at sun.jdbc.odbc.JdbcOdbcDriver.getProtocol(Unknown Source)
		        
		 -->
		
		<!-- Connction Pool überhaupt erst anstellen -->
<!-- 		<property name="hibernate.connection.provider_class">org.hibernate.service.jdbc.connections.internal.C3P0ConnectionProvider</property> -->
<!-- 		<property name="hibernate.connection.pool_size">5</property> -->
		
<!-- 		<property name="hibernate.c3p0.idle_test_period">300</property> In seconds   -->
<!-- 		<property name="hibernate.c3p0.timeout">1800</property>  -->
<!--         <property name="hibernate.c3p0.max_statements">50</property> -->
        
		<!-- Connection Pool auf 1 beschränken.  -->
		<!-- Idee aus: https://stackoverflow.com/questions/29364837/hibernate-sqlite-sqlite-busy -->
<!-- 		<property name="hibernate.c3p0.min_size">1</property> -->
<!-- 		<property name="hibernate.c3p0.max_size">1</property> -->
	<!-- ################################################# -->

		<!-- drop and recreate database schema on startup -->
		<!-- FGL 20131124: Umgeändert auf create, erstellt damit automatisch die 
			Datenbank, ABER: keine Updates. Daher im Code (...main... -Klasse) die Konfiguration 
			"übersteuert" mit dem Parameter UPDATE 	-->
<!-- 		<property name="hibernate.hbm2ddl.auto">create</property> --><!-- wird in der Konfiguration programatisch gesetzt, je nachdem, ob Datenbank vorhanden oder nicht. -->


		<!-- FGL 20171213 - Diese Konfiguration wird für Hibernate auch programmatisch gesetzt -->
		<!--                Es klappt nicht sie dann irgendwie an die EntityManagerFactory zu übergeben -->
		<mapping class="use.thm.persistence.model.AreaCellOcean"></mapping>
		<mapping class="use.thm.persistence.model.AreaCellLand"></mapping>
		<mapping class="use.thm.persistence.model.TroopArmy"></mapping>
		<mapping class="use.thm.persistence.model.TroopFleet"></mapping>
		
		<!-- FGL: 20171019 - Mapping für die Schlüsselwerttabellen -->
		<mapping class="use.thm.persistence.model.TileDefaulttextValue"></mapping><!-- wird aber nicht genutzt, nur demonstrator -->
		<mapping class="use.thm.persistence.model.Defaulttext"></mapping>
		<mapping class="use.thm.persistence.model.TileDefaulttext"></mapping>
		<mapping class="use.thm.persistence.model.TextDefaulttext"></mapping>
		
		<!-- FGL: 20180116 - Mapping für die Schlüsselwerttabellen, die 'unveraenderbare' Werte haben sollen -->		
		<mapping class="use.thm.persistence.model.Immutabletext"></mapping>
		<mapping class="use.thm.persistence.model.TileImmutabletext"></mapping>
		<mapping class="use.thm.persistence.model.TextImmutabletext"></mapping>
		
		<!-- FGL: 20180124 - Mapping für die "Varianten", welche dann die Defaulttexte beinhalten. -->
		<mapping class="use.thm.persistence.model.TroopFleetVariant"></mapping>
		<mapping class="use.thm.persistence.model.TroopArmyVariant"></mapping>
		
		
		<!-- FGL 20180116 TODO GOON -->
<!-- 		<mapping class="use.thm.persistence.model.TileImmutabletext"></mapping> -->
<!-- 		<mapping class="use.thm.persistence.model.TextImmutabletext"></mapping> -->
		

		<!-- FGL: So werden die Klassen für das Mapping herangezogen, aber: Dabei 
			werden Annotations verwendet. -->
		<!-- <mapping class="tryout.hibernate.Shape"></mapping> <mapping class="tryout.hibernate.Rectangle"></mapping> 
			<mapping class="tryout.hibernate.Circle"></mapping> -->
		<!-- FGL 20131124: Darun unterscheidet sich dieses Beispiel von den vorherigen, 
			es wird einen Konigurationsdatei für das Mapping verwendet -->
		<!-- <mapping resource="tryout/hibernate/Person.hbm.xml"/> -->

		<!-- es dürfen hier nur Klassen genannt werden, die auch gefunden werden 
			<mapping class="tryout.hibernate.Person"/> <mapping class="tryout.hibernate.Employee"/> 
			<mapping class="tryout.hibernate.Owner"/> -->

	</session-factory>


</hibernate-configuration>