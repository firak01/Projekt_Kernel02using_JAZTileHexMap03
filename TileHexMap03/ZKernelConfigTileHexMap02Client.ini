##########################################################################################################################
### Diese Ini-Datei ist die Konfiguration des Kernels. Der Name/Pfad muß bei Erstellung des KernelObjekts übergeben werden
##########################################################################################################################
;Merke: An die Zeilen angehängte Semikoli werden nicht als Kommentare erkannt. Am Zeilenanfang schon.
;           Parameter ausserhalb von Sections werden nicht erkannt.
[THM]
### Modulkonfiguration(en) auf Applikationsebene
# Merke: Mit dem Applikationskey endend, ist ganz unspezifisch. Es kann auch eine Modulkonfiguration speziell für eine Klasse geben.
KernelConfigPathTHM=
KernelConfigFileTHM=ZKernelConfigTileHexMap02Client.ini

### Application THM konfigurieren, als System 01 (normalerweise das Produktivsystem)
[THM!01]
#Hierin kann LogZZZ, das ja beim Initialisieren des Kernels auch zur Verfügung gestellt wird, die Protokollierung durchführen
;KernelLogPath=c:\fglKernel\KernelLog
KernelLogPath=c:\temp
KernelLogFile=ZKernelLog_TileHexMap02Client.txt

### Modulkonfiguration(en) auf Systemebene, jeder Test als eigenes Modul, in DIESER ini-Datei ##################
# Jede Klasse, die ein main() enthält 'kann' hier als Modul konfiguriert werden
# Dazu den Klassennamen hier angeben. Um eine extra Datei zu sparen, kann hier auch der gleiche Dateiname wie für den Kernel angegeben werden.
# Schema: KernelConfig + [Path/File] + Klassenname
;KernelConfigPathuse.thm.client.FrmMapSingletonTHM=
;KernelConfigFileuse.thm.client.FrmMapSingletonTHM=ZKernelConfigTileHexMap02Client.ini

### Programmkonfiguration(en) (per Aliasnamen)
# Wenn in diesem File die Module definiert sind, dann können hier auch die einzelnen Programme der Module definiert werden.
# Der hier definierte Aliasname ist ein feststehender Name, der verwendet werden muss, wenn über ihn Parameter aus dem Abschnitt gelesen werden sollen.
# Der Vorteil von Aliasnamen ist, das sie für mehrere 'Programme' verwendet werden können.
# BEISPIEL: Finden der Notes-Context Objekte. z.B. Configurationsdb
# ;das ist nicht der eigentliche Programname .....
# ;use.via.client.DlgIPExternalVIA=IP_Context
# ;use.via.client.module.ip.ProgramIPContentVIA=IP_Context
#
# Merke:
# Jeder Test ist als eigenes Programm definiert. D.h. Er hat in dieser Datei eine eigene Section.
# Es ist möglich Aliaswerte zu definieren (die dann in die Section kokmmen).
# Aber es reicht auch aus den Programnamen als Section zu verwenden.
# Schema: Klassenname oder Aliasname = Aliaswert
#


# Die Hexfeld-Karte
use.thm.client.PanelMain_CENTERTHM=HexMapCentral

# Das Katalog-Panel
use.thm.client.component.VariantCatalogTHM=CatalogPanel


#################################################################
### Applikationsparameter, die auf Systemebenebene definiert wurden.
# Merke: Wenn für die Modulkonfiguration dieselbe ini-Datei wie für die Applikationskonfiguration verwendet wird, dann entspricht das auch einem Parameter, der auf Applikationsebenen konfiguriert wurde.
#            Beispiel: Wenn also einParameter in der Section [VIA#01] liegt, dann ist das ein "Applikationsparameter" und ein "Modulparameter", wenn das ini-File für die Applikationskonfiguration auch als ini-File für die Modulkonfiguration verwendet wird.
#
# Merke: Parameter der Hauptmaske sollten auf Modulebenen definiert werden, weil man an den Namen des Moduls durch frameParent.getClass().getName() rankommt.

;Dieser Parameter gibt an, welche Datei als Logo in den CENTRAL-Panel geladen wird (im Hauptframe, darum Applikationsparameter=Modulparameter)
FileLogo=logo_fritz_tv.png

;Dieser Parameter gibt an, wie groß der Frame sein soll, verglichen mit dem Bildschirm. Wenn er gesetzt ist, wird der Frame auch nicht "gepackt".
FrameSizeInScreenPercent = 70

;++++Diese Parameter werden speziell für log4j benötigt++++
Log4jName=LogTHM
Log4jLevel=DEBUG

;TODO: DIESER EINTRAG  (Log4jPatternPath) SOLLTE AUCH WEGGELASSEN WERDEN KÖNNEN !!!
;Aus dem FilePattern wird eine Log4J Configurationsdatei erzeugt
Log4jPathPattern=
Log4jFilePattern=log4jpattern_test.conf

;Log4jPathConfig=c:\fglkernel\kernelconfig
Log4jFileConfig=log4j.conf


#################################################################
### Konkrete(s) Programm(e)
# Entweder über den Aliasnamen definiert, oder über den Klassennamen direkt
# Für eine spezielle Umgebung kann der Programmname auch definiert werden nach dem Schema:
#         ApplicationKey + "#" + Systemnumber + "!" + Programmname
# Merke: Einträge, die für die spezielle Umgebung gemacht wurden, ersetzen die für den allgemeinen Programmnamen gemachte Einträge.
#
############################################
# Fortsetzung des BEISPIELS für definiertes Programm über einen Aliasnamen.
# [IP_Context]
# ;Das ist die URL, in welcher die externe IP-Adresse des Servers gefunden werden kann.
# URL2Read=http://fgl.homepage.t-online.de/pagIPLinkFGL.html
#
# ;Zu Testzwecken kann auch eine Datei als Quelle der IP-Adresse angegeben werden
# ;URL2Read=file:///C:\1fgl\Workspace\Eclipse3FGL\JAZVideoInternetArchive\pagIPLinkFGL4Debug.html
#
# ;Ggf. zu verwendender Proxy
# ;ProxyHost=145.254.22.10
# ProxyHost=
# ProxyPort=8000
#
# ;Die IP, welche in der URL2Read gefunden und dann hier abgespeichert wurde. Merke: In der Entwicklungsumgebung ist 192.168.3.101 zu verwenden
# IPExternal=84.135.227.75

################################################
# Die zentrale Karte
[HexMapCentral]
NumberOfColumn=20
NumberOfRow=16
HexSideLength=40

# Für Spielsteine, die auf dieser Karte (damit ist es das PanelParent) platziert werden
IconWidth=50
IconHeight=20


# Das Katalog Panel
[CatalogPanel]
IconWidth=100
IconHeight=40

#ACHTUNG: Übernimm die Lösung, dass etwas an einer anderen Stelle Konfiguriert wurde und hier wiederverwendet wird. Somit kann man wie im Beispiel unten auch Strings zusammensetzen.
#Das ist die URL, welche für das login verwendet wird. Durch KernelExpressionIniSolverZZZ.compute() wird der Ausdruck: <Z>[IP_CONTEXT]IPExternal</Z> aufgelöst
#URLLogin = "http://<Z>[IP_CONTEXT!03]IPExternal</Z>/names.nsf?login"
#IconWidthOnDrag=50
#IconHeightOnDrag=20
IconWidthOnDrag=<Z>[HexMapCentral]IconWidth</Z>
IconHeightOnDrag=<Z>[HexMapCentral]IconHeight</Z>
