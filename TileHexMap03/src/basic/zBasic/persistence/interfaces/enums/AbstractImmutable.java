package basic.zBasic.persistence.interfaces.enums;

import java.util.ArrayList;

import use.thm.persistence.model.TileDefaulttext.EnumTileDefaulttext;

/**
 * Oberklasse für internationalisierbare (Schlüssel-)Entities.
 * Hier: Gedacht für immutable - Werte. D.h. keine public Setter.
 *
 * @author lindhauer
 * @version $Id: AbstractValue.java,v 1.28 2016-10-24 10:09:29 d.herrmann#his.de Exp $
 * @param <V> the concrete value class
 */
//@MappedSuperclass
public abstract class AbstractImmutable<V extends AbstractImmutable<V>> { //!!! noch ein zweites extends dahinter!!!  extends I18nValueImpl implents KeyValue, UniqueNameValue, SortorderValue, Comparable<V> {

//    /** Value cache region identifier. */
//    public static final String VALUE_CACHE_REGION = "de.his.appserver.ValueCache";

    /** serialVersionUID */
    private static final long serialVersionUID = 1L;

    /** Unique name. */
//    @Column(length = 254)
//    private String uniquename;
//
//    /** Sortierreihenfolge, falls nicht nach defaulttext sortiert werden soll */
//    private Integer sortorder;


    /**
     * creates a new AbstractValue with an initial text
     *
     * @param text initial text
     */
    public AbstractImmutable(String text) {
//        super(text);
//        this.uniquename = text;
    }

//    @Override
//    public int compareTo(V o) {
//        if (this.equals(o)) {
//            return 0;
//        }
//        int cmp = SortorderValueComparatorImpl.getInstance().compare(this, o);
//        if (cmp != 0) {
//            return cmp;
//        }
//        cmp = Strings.nullToEmpty(this.getDefaulttext()).compareTo(Strings.nullToEmpty(o.getDefaulttext()));
//        if (cmp != 0) {
//            return cmp;
//        }
//        return -1;
//    }


//    @Override
//    /**
//     * Kombination aus Uniquename und Defaulttext angeben, falls vorhanden, z.B. 'de - deutsch'
//     */
//    public String toDisplayString() {
//        String defaulttext = getDefaulttext();
//
//        if (StringUtils.isEmpty(defaulttext) && StringUtils.isEmpty(uniquename)) {
//            return super.toDisplayString();
//        }
//        String result = "";
//        if (!StringUtils.isEmpty(uniquename)) {
//            result += uniquename;
//        }
//        if (!StringUtils.isEmpty(defaulttext)) {
//            if (!result.isEmpty()) {
//                result += " - ";
//            }
//            result += defaulttext;
//        }
//        return result;
//    }
//
//    public String getBestTranslationOfDefaultText() {
//        return this.getDefaulttextI18n().getBestTranslation();
//    }


    /* GENERATED_BEGIN */

    /**
     * Autogenerated Default-Constructor
     * cut&paste out of 'GENERATED'-Block to modify
     */
    public AbstractImmutable() {
        super();
    }

//    /**
//     * Autogenerated Constructor to use if an already generated objGuid is to be used (e.g. from an EntityDto)
//     * @param objGuid
//     */
//    public AbstractValue(de.his.core.util.generator.UUIDWrapper objGuid) {
//        this();
//        setObjGuid(objGuid.toString());
//    }
//
//    /**
//     * @return uniquename
//     */
//    @Override
//    public String getUniquename() {
//        return uniquename;
//    }


//    /**
//     * @param newValue
//     */
//    @Override
//    public void setUniquename(String newValue) {
//        this.uniquename = newValue;
//    }
//
//    /**
//     * @return sortorder
//     */
//    @Override
//    public Integer getSortorder() {
//        return sortorder;
//    }
//
//
//    /**
//     * @param newValue
//     */
//    @Override
//    public void setSortorder(Integer newValue) {
//        this.sortorder = newValue;
//    }


    private static final java.util.List<String> allAttributeNames = java.util.Arrays.asList(new String[]{ }); //"sortorder", "uniquename"});//FGL: sortorder und uiquename habe ich so noch nicht mplementiert

    /**
     * {@inheritDoc}
     */
    //@java.lang.Override //Merke: Klasse ist in der Vererbung die höchste Stufe
    public java.util.List<String> getAllAttributeNames() {
        return getAllAttributeNamesIntern();
    }

    /**
     * {@inheritDoc}
     */
    //@java.lang.Override //Merke: Klasse ist in der Vererbung die höchste Stufe
    protected java.util.List<String> getAllAttributeNamesIntern() {
    	//Falls diese Klasse noch von einer anderen Klasse erbt, von dieser die interne Liste "mintehmen".
    	//java.util.List<String> tmp = super.getAllAttributeNamesIntern(); //Merke: ggfs. wird diese Klasse im Original noch zusätzlich ein zweites Mal erweitert mit extends I18nValueImpl 
        //tmp.addAll(allAttributeNames);
    	//return tmp;
    	
    	//Da diese Klasse in der Vererbung die höchste Klasse ist, die ArrayList direkter zurückgeben.
        return new ArrayList<String>(allAttributeNames);        
    }
    

    
    /* GENERATED_END */

    // Wofür wurde dieses toString() verwendet? Falls es explizit für eine "Anzeige" benötigt wird, toDisplayString() überschreiben und benutzen.
    // @Override
    // public String toString() {
    // return super.toString() + ", uniquename=" + uniquename;
    // }
    
}
